/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Celebrity: CelebrityObject
      CelebrityConnection: CelebrityConnectionObject
      PageInfo: PageInfoObject
      CelebrityEdge: CelebrityEdgeObject
      AggregateCelebrity: AggregateCelebrityObject
      IP: IPObject
      IPConnection: IPConnectionObject
      IPEdge: IPEdgeObject
      AggregateIP: AggregateIPObject
      Match: MatchObject
      MatchConnection: MatchConnectionObject
      MatchEdge: MatchEdgeObject
      AggregateMatch: AggregateMatchObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      CelebritySubscriptionPayload: CelebritySubscriptionPayloadObject
      CelebrityPreviousValues: CelebrityPreviousValuesObject
      IPSubscriptionPayload: IPSubscriptionPayloadObject
      IPPreviousValues: IPPreviousValuesObject
      MatchSubscriptionPayload: MatchSubscriptionPayloadObject
      MatchPreviousValues: MatchPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Celebrity: CelebrityFieldDetails
      CelebrityConnection: CelebrityConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      CelebrityEdge: CelebrityEdgeFieldDetails
      AggregateCelebrity: AggregateCelebrityFieldDetails
      IP: IPFieldDetails
      IPConnection: IPConnectionFieldDetails
      IPEdge: IPEdgeFieldDetails
      AggregateIP: AggregateIPFieldDetails
      Match: MatchFieldDetails
      MatchConnection: MatchConnectionFieldDetails
      MatchEdge: MatchEdgeFieldDetails
      AggregateMatch: AggregateMatchFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      CelebritySubscriptionPayload: CelebritySubscriptionPayloadFieldDetails
      CelebrityPreviousValues: CelebrityPreviousValuesFieldDetails
      IPSubscriptionPayload: IPSubscriptionPayloadFieldDetails
      IPPreviousValues: IPPreviousValuesFieldDetails
      MatchSubscriptionPayload: MatchSubscriptionPayloadFieldDetails
      MatchPreviousValues: MatchPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      CelebrityWhereUniqueInput: CelebrityWhereUniqueInputInputObject
      CelebrityWhereInput: CelebrityWhereInputInputObject
      IPWhereUniqueInput: IPWhereUniqueInputInputObject
      IPWhereInput: IPWhereInputInputObject
      MatchWhereUniqueInput: MatchWhereUniqueInputInputObject
      MatchWhereInput: MatchWhereInputInputObject
      CelebrityCreateInput: CelebrityCreateInputInputObject
      CelebrityUpdateInput: CelebrityUpdateInputInputObject
      CelebrityUpdateManyMutationInput: CelebrityUpdateManyMutationInputInputObject
      IPCreateInput: IPCreateInputInputObject
      IPUpdateInput: IPUpdateInputInputObject
      IPUpdateManyMutationInput: IPUpdateManyMutationInputInputObject
      MatchCreateInput: MatchCreateInputInputObject
      CelebrityCreateOneInput: CelebrityCreateOneInputInputObject
      MatchUpdateInput: MatchUpdateInputInputObject
      CelebrityUpdateOneRequiredInput: CelebrityUpdateOneRequiredInputInputObject
      CelebrityUpdateDataInput: CelebrityUpdateDataInputInputObject
      CelebrityUpsertNestedInput: CelebrityUpsertNestedInputInputObject
      MatchUpdateManyMutationInput: MatchUpdateManyMutationInputInputObject
      CelebritySubscriptionWhereInput: CelebritySubscriptionWhereInputInputObject
      IPSubscriptionWhereInput: IPSubscriptionWhereInputInputObject
      MatchSubscriptionWhereInput: MatchSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    CelebrityOrderByInput: CelebrityOrderByInputValues,
    IPOrderByInput: IPOrderByInputValues,
    MatchOrderByInput: MatchOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'celebrity', args?: QueryCelebrityArgs[] | false, alias?: string  } 
  | { name: 'celebrities', args?: QueryCelebritiesArgs[] | false, alias?: string  } 
  | { name: 'celebritiesConnection', args?: QueryCelebritiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'iP', args?: QueryIPArgs[] | false, alias?: string  } 
  | { name: 'iPs', args?: QueryIPsArgs[] | false, alias?: string  } 
  | { name: 'iPsConnection', args?: QueryIPsConnectionArgs[] | false, alias?: string  } 
  | { name: 'match', args?: QueryMatchArgs[] | false, alias?: string  } 
  | { name: 'matches', args?: QueryMatchesArgs[] | false, alias?: string  } 
  | { name: 'matchesConnection', args?: QueryMatchesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'celebrity'
  | 'celebrities'
  | 'celebritiesConnection'
  | 'iP'
  | 'iPs'
  | 'iPsConnection'
  | 'match'
  | 'matches'
  | 'matchesConnection'


type QueryCelebrityArgs =
  | 'where'
type QueryCelebritiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCelebritiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryIPArgs =
  | 'where'
type QueryIPsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryIPsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMatchArgs =
  | 'where'
type QueryMatchesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMatchesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  celebrity: {
    type: 'Celebrity'
    args: Record<QueryCelebrityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CelebrityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity | null> | prisma.Celebrity | null
  }
  celebrities: {
    type: 'Celebrity'
    args: Record<QueryCelebritiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CelebrityWhereInput | null, orderBy?: prisma.CelebrityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity[]> | prisma.Celebrity[]
  }
  celebritiesConnection: {
    type: 'CelebrityConnection'
    args: Record<QueryCelebritiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CelebrityWhereInput | null, orderBy?: prisma.CelebrityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CelebrityConnection> | prisma.CelebrityConnection
  }
  iP: {
    type: 'IP'
    args: Record<QueryIPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: IPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP | null> | prisma.IP | null
  }
  iPs: {
    type: 'IP'
    args: Record<QueryIPsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: IPWhereInput | null, orderBy?: prisma.IPOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP[]> | prisma.IP[]
  }
  iPsConnection: {
    type: 'IPConnection'
    args: Record<QueryIPsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: IPWhereInput | null, orderBy?: prisma.IPOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IPConnection> | prisma.IPConnection
  }
  match: {
    type: 'Match'
    args: Record<QueryMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MatchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  matches: {
    type: 'Match'
    args: Record<QueryMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match[]> | prisma.Match[]
  }
  matchesConnection: {
    type: 'MatchConnection'
    args: Record<QueryMatchesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchConnection> | prisma.MatchConnection
  }
}
  

// Types for Celebrity

type CelebrityObject =
  | CelebrityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'internalId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'elo', args?: [] | false, alias?: string  } 
  | { name: 'disabled', args?: [] | false, alias?: string  } 
  | { name: 'totalMatches', args?: [] | false, alias?: string  } 
  | { name: 'unknownCount', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'imageSource', args?: [] | false, alias?: string  } 

type CelebrityFields =
  | 'id'
  | 'internalId'
  | 'name'
  | 'elo'
  | 'disabled'
  | 'totalMatches'
  | 'unknownCount'
  | 'image'
  | 'imageSource'



  

export interface CelebrityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  internalId: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  elo: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  disabled: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalMatches: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  unknownCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  imageSource: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CelebrityConnection

type CelebrityConnectionObject =
  | CelebrityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CelebrityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CelebrityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CelebrityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CelebrityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CelebrityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CelebrityEdge[]> | prisma.CelebrityEdge[]
  }
  aggregate: {
    type: 'AggregateCelebrity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CelebrityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCelebrity> | prisma.AggregateCelebrity
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CelebrityEdge

type CelebrityEdgeObject =
  | CelebrityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CelebrityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CelebrityEdgeFieldDetails {
  node: {
    type: 'Celebrity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CelebrityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity> | prisma.Celebrity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCelebrity

type AggregateCelebrityObject =
  | AggregateCelebrityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCelebrityFields =
  | 'count'



  

export interface AggregateCelebrityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for IP

type IPObject =
  | IPFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'ip', args?: [] | false, alias?: string  } 
  | { name: 'votes', args?: [] | false, alias?: string  } 

type IPFields =
  | 'id'
  | 'ip'
  | 'votes'



  

export interface IPFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ip: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  votes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for IPConnection

type IPConnectionObject =
  | IPConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type IPConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface IPConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'IPEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"IPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IPEdge[]> | prisma.IPEdge[]
  }
  aggregate: {
    type: 'AggregateIP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateIP> | prisma.AggregateIP
  }
}
  

// Types for IPEdge

type IPEdgeObject =
  | IPEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type IPEdgeFields =
  | 'node'
  | 'cursor'



  

export interface IPEdgeFieldDetails {
  node: {
    type: 'IP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IPEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP> | prisma.IP
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateIP

type AggregateIPObject =
  | AggregateIPFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateIPFields =
  | 'count'



  

export interface AggregateIPFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Match

type MatchObject =
  | MatchFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'ip', args?: [] | false, alias?: string  } 
  | { name: 'celebOne', args?: [] | false, alias?: string  } 
  | { name: 'celebTwo', args?: [] | false, alias?: string  } 
  | { name: 'expected', args?: [] | false, alias?: string  } 
  | { name: 'complete', args?: [] | false, alias?: string  } 

type MatchFields =
  | 'id'
  | 'ip'
  | 'celebOne'
  | 'celebTwo'
  | 'expected'
  | 'complete'



  

export interface MatchFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ip: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  celebOne: {
    type: 'Celebrity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity> | prisma.Celebrity
  }
  celebTwo: {
    type: 'Celebrity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity> | prisma.Celebrity
  }
  expected: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  complete: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MatchConnection

type MatchConnectionObject =
  | MatchConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MatchConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MatchConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MatchEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MatchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchEdge[]> | prisma.MatchEdge[]
  }
  aggregate: {
    type: 'AggregateMatch'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMatch> | prisma.AggregateMatch
  }
}
  

// Types for MatchEdge

type MatchEdgeObject =
  | MatchEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MatchEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MatchEdgeFieldDetails {
  node: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMatch

type AggregateMatchObject =
  | AggregateMatchFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMatchFields =
  | 'count'



  

export interface AggregateMatchFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createCelebrity', args?: MutationCreateCelebrityArgs[] | false, alias?: string  } 
  | { name: 'updateCelebrity', args?: MutationUpdateCelebrityArgs[] | false, alias?: string  } 
  | { name: 'updateManyCelebrities', args?: MutationUpdateManyCelebritiesArgs[] | false, alias?: string  } 
  | { name: 'upsertCelebrity', args?: MutationUpsertCelebrityArgs[] | false, alias?: string  } 
  | { name: 'deleteCelebrity', args?: MutationDeleteCelebrityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCelebrities', args?: MutationDeleteManyCelebritiesArgs[] | false, alias?: string  } 
  | { name: 'createIP', args?: MutationCreateIPArgs[] | false, alias?: string  } 
  | { name: 'updateIP', args?: MutationUpdateIPArgs[] | false, alias?: string  } 
  | { name: 'updateManyIPs', args?: MutationUpdateManyIPsArgs[] | false, alias?: string  } 
  | { name: 'upsertIP', args?: MutationUpsertIPArgs[] | false, alias?: string  } 
  | { name: 'deleteIP', args?: MutationDeleteIPArgs[] | false, alias?: string  } 
  | { name: 'deleteManyIPs', args?: MutationDeleteManyIPsArgs[] | false, alias?: string  } 
  | { name: 'createMatch', args?: MutationCreateMatchArgs[] | false, alias?: string  } 
  | { name: 'updateMatch', args?: MutationUpdateMatchArgs[] | false, alias?: string  } 
  | { name: 'updateManyMatches', args?: MutationUpdateManyMatchesArgs[] | false, alias?: string  } 
  | { name: 'upsertMatch', args?: MutationUpsertMatchArgs[] | false, alias?: string  } 
  | { name: 'deleteMatch', args?: MutationDeleteMatchArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMatches', args?: MutationDeleteManyMatchesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createCelebrity'
  | 'updateCelebrity'
  | 'updateManyCelebrities'
  | 'upsertCelebrity'
  | 'deleteCelebrity'
  | 'deleteManyCelebrities'
  | 'createIP'
  | 'updateIP'
  | 'updateManyIPs'
  | 'upsertIP'
  | 'deleteIP'
  | 'deleteManyIPs'
  | 'createMatch'
  | 'updateMatch'
  | 'updateManyMatches'
  | 'upsertMatch'
  | 'deleteMatch'
  | 'deleteManyMatches'


type MutationCreateCelebrityArgs =
  | 'data'
type MutationUpdateCelebrityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCelebritiesArgs =
  | 'data'
  | 'where'
type MutationUpsertCelebrityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCelebrityArgs =
  | 'where'
type MutationDeleteManyCelebritiesArgs =
  | 'where'
type MutationCreateIPArgs =
  | 'data'
type MutationUpdateIPArgs =
  | 'data'
  | 'where'
type MutationUpdateManyIPsArgs =
  | 'data'
  | 'where'
type MutationUpsertIPArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteIPArgs =
  | 'where'
type MutationDeleteManyIPsArgs =
  | 'where'
type MutationCreateMatchArgs =
  | 'data'
type MutationUpdateMatchArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMatchesArgs =
  | 'data'
  | 'where'
type MutationUpsertMatchArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMatchArgs =
  | 'where'
type MutationDeleteManyMatchesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createCelebrity: {
    type: 'Celebrity'
    args: Record<MutationCreateCelebrityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CelebrityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity> | prisma.Celebrity
  }
  updateCelebrity: {
    type: 'Celebrity'
    args: Record<MutationUpdateCelebrityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CelebrityUpdateInput, where: CelebrityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity | null> | prisma.Celebrity | null
  }
  updateManyCelebrities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCelebritiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CelebrityUpdateManyMutationInput, where?: CelebrityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCelebrity: {
    type: 'Celebrity'
    args: Record<MutationUpsertCelebrityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CelebrityWhereUniqueInput, create: CelebrityCreateInput, update: CelebrityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity> | prisma.Celebrity
  }
  deleteCelebrity: {
    type: 'Celebrity'
    args: Record<MutationDeleteCelebrityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CelebrityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity | null> | prisma.Celebrity | null
  }
  deleteManyCelebrities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCelebritiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CelebrityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createIP: {
    type: 'IP'
    args: Record<MutationCreateIPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IPCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP> | prisma.IP
  }
  updateIP: {
    type: 'IP'
    args: Record<MutationUpdateIPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IPUpdateInput, where: IPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP | null> | prisma.IP | null
  }
  updateManyIPs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyIPsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IPUpdateManyMutationInput, where?: IPWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertIP: {
    type: 'IP'
    args: Record<MutationUpsertIPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: IPWhereUniqueInput, create: IPCreateInput, update: IPUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP> | prisma.IP
  }
  deleteIP: {
    type: 'IP'
    args: Record<MutationDeleteIPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: IPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP | null> | prisma.IP | null
  }
  deleteManyIPs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyIPsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: IPWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMatch: {
    type: 'Match'
    args: Record<MutationCreateMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MatchCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  updateMatch: {
    type: 'Match'
    args: Record<MutationUpdateMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MatchUpdateInput, where: MatchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  updateManyMatches: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MatchUpdateManyMutationInput, where?: MatchWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMatch: {
    type: 'Match'
    args: Record<MutationUpsertMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MatchWhereUniqueInput, create: MatchCreateInput, update: MatchUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  deleteMatch: {
    type: 'Match'
    args: Record<MutationDeleteMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MatchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  deleteManyMatches: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MatchWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'celebrity', args?: SubscriptionCelebrityArgs[] | false, alias?: string  } 
  | { name: 'iP', args?: SubscriptionIPArgs[] | false, alias?: string  } 
  | { name: 'match', args?: SubscriptionMatchArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'celebrity'
  | 'iP'
  | 'match'


type SubscriptionCelebrityArgs =
  | 'where'
type SubscriptionIPArgs =
  | 'where'
type SubscriptionMatchArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  celebrity: {
    type: 'CelebritySubscriptionPayload'
    args: Record<SubscriptionCelebrityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CelebritySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CelebritySubscriptionPayload | null> | prisma.CelebritySubscriptionPayload | null
  }
  iP: {
    type: 'IPSubscriptionPayload'
    args: Record<SubscriptionIPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: IPSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IPSubscriptionPayload | null> | prisma.IPSubscriptionPayload | null
  }
  match: {
    type: 'MatchSubscriptionPayload'
    args: Record<SubscriptionMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MatchSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchSubscriptionPayload | null> | prisma.MatchSubscriptionPayload | null
  }
}
  

// Types for CelebritySubscriptionPayload

type CelebritySubscriptionPayloadObject =
  | CelebritySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CelebritySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CelebritySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CelebritySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Celebrity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CelebritySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Celebrity | null> | prisma.Celebrity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CelebrityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CelebritySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CelebrityPreviousValues | null> | prisma.CelebrityPreviousValues | null
  }
}
  

// Types for CelebrityPreviousValues

type CelebrityPreviousValuesObject =
  | CelebrityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'internalId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'elo', args?: [] | false, alias?: string  } 
  | { name: 'disabled', args?: [] | false, alias?: string  } 
  | { name: 'totalMatches', args?: [] | false, alias?: string  } 
  | { name: 'unknownCount', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'imageSource', args?: [] | false, alias?: string  } 

type CelebrityPreviousValuesFields =
  | 'id'
  | 'internalId'
  | 'name'
  | 'elo'
  | 'disabled'
  | 'totalMatches'
  | 'unknownCount'
  | 'image'
  | 'imageSource'



  

export interface CelebrityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  internalId: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  elo: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  disabled: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalMatches: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  unknownCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  imageSource: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for IPSubscriptionPayload

type IPSubscriptionPayloadObject =
  | IPSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type IPSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface IPSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'IP'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IP | null> | prisma.IP | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'IPPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IPPreviousValues | null> | prisma.IPPreviousValues | null
  }
}
  

// Types for IPPreviousValues

type IPPreviousValuesObject =
  | IPPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'ip', args?: [] | false, alias?: string  } 
  | { name: 'votes', args?: [] | false, alias?: string  } 

type IPPreviousValuesFields =
  | 'id'
  | 'ip'
  | 'votes'



  

export interface IPPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ip: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  votes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MatchSubscriptionPayload

type MatchSubscriptionPayloadObject =
  | MatchSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MatchSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MatchSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MatchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MatchPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MatchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchPreviousValues | null> | prisma.MatchPreviousValues | null
  }
}
  

// Types for MatchPreviousValues

type MatchPreviousValuesObject =
  | MatchPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'ip', args?: [] | false, alias?: string  } 
  | { name: 'expected', args?: [] | false, alias?: string  } 
  | { name: 'complete', args?: [] | false, alias?: string  } 

type MatchPreviousValuesFields =
  | 'id'
  | 'ip'
  | 'expected'
  | 'complete'



  

export interface MatchPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ip: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expected: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  complete: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface CelebrityWhereUniqueInput {
  id?: string | null
  internalId?: string | null
}
export type CelebrityWhereUniqueInputInputObject =
  | Extract<keyof CelebrityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'internalId', alias?: string  } 
  
export interface CelebrityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  internalId?: string | null
  internalId_not?: string | null
  internalId_in?: string[]
  internalId_not_in?: string[]
  internalId_lt?: string | null
  internalId_lte?: string | null
  internalId_gt?: string | null
  internalId_gte?: string | null
  internalId_contains?: string | null
  internalId_not_contains?: string | null
  internalId_starts_with?: string | null
  internalId_not_starts_with?: string | null
  internalId_ends_with?: string | null
  internalId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  elo?: number | null
  elo_not?: number | null
  elo_in?: number[]
  elo_not_in?: number[]
  elo_lt?: number | null
  elo_lte?: number | null
  elo_gt?: number | null
  elo_gte?: number | null
  disabled?: boolean | null
  disabled_not?: boolean | null
  totalMatches?: number | null
  totalMatches_not?: number | null
  totalMatches_in?: number[]
  totalMatches_not_in?: number[]
  totalMatches_lt?: number | null
  totalMatches_lte?: number | null
  totalMatches_gt?: number | null
  totalMatches_gte?: number | null
  unknownCount?: number | null
  unknownCount_not?: number | null
  unknownCount_in?: number[]
  unknownCount_not_in?: number[]
  unknownCount_lt?: number | null
  unknownCount_lte?: number | null
  unknownCount_gt?: number | null
  unknownCount_gte?: number | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  imageSource?: string | null
  imageSource_not?: string | null
  imageSource_in?: string[]
  imageSource_not_in?: string[]
  imageSource_lt?: string | null
  imageSource_lte?: string | null
  imageSource_gt?: string | null
  imageSource_gte?: string | null
  imageSource_contains?: string | null
  imageSource_not_contains?: string | null
  imageSource_starts_with?: string | null
  imageSource_not_starts_with?: string | null
  imageSource_ends_with?: string | null
  imageSource_not_ends_with?: string | null
  AND?: CelebrityWhereInput[]
  OR?: CelebrityWhereInput[]
  NOT?: CelebrityWhereInput[]
}
export type CelebrityWhereInputInputObject =
  | Extract<keyof CelebrityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'internalId', alias?: string  } 
  | { name: 'internalId_not', alias?: string  } 
  | { name: 'internalId_in', alias?: string  } 
  | { name: 'internalId_not_in', alias?: string  } 
  | { name: 'internalId_lt', alias?: string  } 
  | { name: 'internalId_lte', alias?: string  } 
  | { name: 'internalId_gt', alias?: string  } 
  | { name: 'internalId_gte', alias?: string  } 
  | { name: 'internalId_contains', alias?: string  } 
  | { name: 'internalId_not_contains', alias?: string  } 
  | { name: 'internalId_starts_with', alias?: string  } 
  | { name: 'internalId_not_starts_with', alias?: string  } 
  | { name: 'internalId_ends_with', alias?: string  } 
  | { name: 'internalId_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'elo', alias?: string  } 
  | { name: 'elo_not', alias?: string  } 
  | { name: 'elo_in', alias?: string  } 
  | { name: 'elo_not_in', alias?: string  } 
  | { name: 'elo_lt', alias?: string  } 
  | { name: 'elo_lte', alias?: string  } 
  | { name: 'elo_gt', alias?: string  } 
  | { name: 'elo_gte', alias?: string  } 
  | { name: 'disabled', alias?: string  } 
  | { name: 'disabled_not', alias?: string  } 
  | { name: 'totalMatches', alias?: string  } 
  | { name: 'totalMatches_not', alias?: string  } 
  | { name: 'totalMatches_in', alias?: string  } 
  | { name: 'totalMatches_not_in', alias?: string  } 
  | { name: 'totalMatches_lt', alias?: string  } 
  | { name: 'totalMatches_lte', alias?: string  } 
  | { name: 'totalMatches_gt', alias?: string  } 
  | { name: 'totalMatches_gte', alias?: string  } 
  | { name: 'unknownCount', alias?: string  } 
  | { name: 'unknownCount_not', alias?: string  } 
  | { name: 'unknownCount_in', alias?: string  } 
  | { name: 'unknownCount_not_in', alias?: string  } 
  | { name: 'unknownCount_lt', alias?: string  } 
  | { name: 'unknownCount_lte', alias?: string  } 
  | { name: 'unknownCount_gt', alias?: string  } 
  | { name: 'unknownCount_gte', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'imageSource', alias?: string  } 
  | { name: 'imageSource_not', alias?: string  } 
  | { name: 'imageSource_in', alias?: string  } 
  | { name: 'imageSource_not_in', alias?: string  } 
  | { name: 'imageSource_lt', alias?: string  } 
  | { name: 'imageSource_lte', alias?: string  } 
  | { name: 'imageSource_gt', alias?: string  } 
  | { name: 'imageSource_gte', alias?: string  } 
  | { name: 'imageSource_contains', alias?: string  } 
  | { name: 'imageSource_not_contains', alias?: string  } 
  | { name: 'imageSource_starts_with', alias?: string  } 
  | { name: 'imageSource_not_starts_with', alias?: string  } 
  | { name: 'imageSource_ends_with', alias?: string  } 
  | { name: 'imageSource_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IPWhereUniqueInput {
  id?: string | null
  ip?: string | null
}
export type IPWhereUniqueInputInputObject =
  | Extract<keyof IPWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'ip', alias?: string  } 
  
export interface IPWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  ip?: string | null
  ip_not?: string | null
  ip_in?: string[]
  ip_not_in?: string[]
  ip_lt?: string | null
  ip_lte?: string | null
  ip_gt?: string | null
  ip_gte?: string | null
  ip_contains?: string | null
  ip_not_contains?: string | null
  ip_starts_with?: string | null
  ip_not_starts_with?: string | null
  ip_ends_with?: string | null
  ip_not_ends_with?: string | null
  votes?: number | null
  votes_not?: number | null
  votes_in?: number[]
  votes_not_in?: number[]
  votes_lt?: number | null
  votes_lte?: number | null
  votes_gt?: number | null
  votes_gte?: number | null
  AND?: IPWhereInput[]
  OR?: IPWhereInput[]
  NOT?: IPWhereInput[]
}
export type IPWhereInputInputObject =
  | Extract<keyof IPWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'ip', alias?: string  } 
  | { name: 'ip_not', alias?: string  } 
  | { name: 'ip_in', alias?: string  } 
  | { name: 'ip_not_in', alias?: string  } 
  | { name: 'ip_lt', alias?: string  } 
  | { name: 'ip_lte', alias?: string  } 
  | { name: 'ip_gt', alias?: string  } 
  | { name: 'ip_gte', alias?: string  } 
  | { name: 'ip_contains', alias?: string  } 
  | { name: 'ip_not_contains', alias?: string  } 
  | { name: 'ip_starts_with', alias?: string  } 
  | { name: 'ip_not_starts_with', alias?: string  } 
  | { name: 'ip_ends_with', alias?: string  } 
  | { name: 'ip_not_ends_with', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  | { name: 'votes_not', alias?: string  } 
  | { name: 'votes_in', alias?: string  } 
  | { name: 'votes_not_in', alias?: string  } 
  | { name: 'votes_lt', alias?: string  } 
  | { name: 'votes_lte', alias?: string  } 
  | { name: 'votes_gt', alias?: string  } 
  | { name: 'votes_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MatchWhereUniqueInput {
  id?: string | null
}
export type MatchWhereUniqueInputInputObject =
  | Extract<keyof MatchWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MatchWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  ip?: string | null
  ip_not?: string | null
  ip_in?: string[]
  ip_not_in?: string[]
  ip_lt?: string | null
  ip_lte?: string | null
  ip_gt?: string | null
  ip_gte?: string | null
  ip_contains?: string | null
  ip_not_contains?: string | null
  ip_starts_with?: string | null
  ip_not_starts_with?: string | null
  ip_ends_with?: string | null
  ip_not_ends_with?: string | null
  celebOne?: CelebrityWhereInput | null
  celebTwo?: CelebrityWhereInput | null
  expected?: number | null
  expected_not?: number | null
  expected_in?: number[]
  expected_not_in?: number[]
  expected_lt?: number | null
  expected_lte?: number | null
  expected_gt?: number | null
  expected_gte?: number | null
  complete?: boolean | null
  complete_not?: boolean | null
  AND?: MatchWhereInput[]
  OR?: MatchWhereInput[]
  NOT?: MatchWhereInput[]
}
export type MatchWhereInputInputObject =
  | Extract<keyof MatchWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'ip', alias?: string  } 
  | { name: 'ip_not', alias?: string  } 
  | { name: 'ip_in', alias?: string  } 
  | { name: 'ip_not_in', alias?: string  } 
  | { name: 'ip_lt', alias?: string  } 
  | { name: 'ip_lte', alias?: string  } 
  | { name: 'ip_gt', alias?: string  } 
  | { name: 'ip_gte', alias?: string  } 
  | { name: 'ip_contains', alias?: string  } 
  | { name: 'ip_not_contains', alias?: string  } 
  | { name: 'ip_starts_with', alias?: string  } 
  | { name: 'ip_not_starts_with', alias?: string  } 
  | { name: 'ip_ends_with', alias?: string  } 
  | { name: 'ip_not_ends_with', alias?: string  } 
  | { name: 'celebOne', alias?: string  } 
  | { name: 'celebTwo', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'expected_not', alias?: string  } 
  | { name: 'expected_in', alias?: string  } 
  | { name: 'expected_not_in', alias?: string  } 
  | { name: 'expected_lt', alias?: string  } 
  | { name: 'expected_lte', alias?: string  } 
  | { name: 'expected_gt', alias?: string  } 
  | { name: 'expected_gte', alias?: string  } 
  | { name: 'complete', alias?: string  } 
  | { name: 'complete_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CelebrityCreateInput {
  id?: string | null
  internalId?: string
  name?: string
  elo?: number | null
  disabled?: boolean | null
  totalMatches?: number | null
  unknownCount?: number | null
  image?: string | null
  imageSource?: string | null
}
export type CelebrityCreateInputInputObject =
  | Extract<keyof CelebrityCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'internalId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'elo', alias?: string  } 
  | { name: 'disabled', alias?: string  } 
  | { name: 'totalMatches', alias?: string  } 
  | { name: 'unknownCount', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'imageSource', alias?: string  } 
  
export interface CelebrityUpdateInput {
  internalId?: string | null
  name?: string | null
  elo?: number | null
  disabled?: boolean | null
  totalMatches?: number | null
  unknownCount?: number | null
  image?: string | null
  imageSource?: string | null
}
export type CelebrityUpdateInputInputObject =
  | Extract<keyof CelebrityUpdateInput, string>
  | { name: 'internalId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'elo', alias?: string  } 
  | { name: 'disabled', alias?: string  } 
  | { name: 'totalMatches', alias?: string  } 
  | { name: 'unknownCount', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'imageSource', alias?: string  } 
  
export interface CelebrityUpdateManyMutationInput {
  internalId?: string | null
  name?: string | null
  elo?: number | null
  disabled?: boolean | null
  totalMatches?: number | null
  unknownCount?: number | null
  image?: string | null
  imageSource?: string | null
}
export type CelebrityUpdateManyMutationInputInputObject =
  | Extract<keyof CelebrityUpdateManyMutationInput, string>
  | { name: 'internalId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'elo', alias?: string  } 
  | { name: 'disabled', alias?: string  } 
  | { name: 'totalMatches', alias?: string  } 
  | { name: 'unknownCount', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'imageSource', alias?: string  } 
  
export interface IPCreateInput {
  id?: string | null
  ip?: string
  votes?: number | null
}
export type IPCreateInputInputObject =
  | Extract<keyof IPCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'ip', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface IPUpdateInput {
  ip?: string | null
  votes?: number | null
}
export type IPUpdateInputInputObject =
  | Extract<keyof IPUpdateInput, string>
  | { name: 'ip', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface IPUpdateManyMutationInput {
  ip?: string | null
  votes?: number | null
}
export type IPUpdateManyMutationInputInputObject =
  | Extract<keyof IPUpdateManyMutationInput, string>
  | { name: 'ip', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface MatchCreateInput {
  id?: string | null
  ip?: string
  celebOne?: CelebrityCreateOneInput
  celebTwo?: CelebrityCreateOneInput
  expected?: number
  complete?: boolean
}
export type MatchCreateInputInputObject =
  | Extract<keyof MatchCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'ip', alias?: string  } 
  | { name: 'celebOne', alias?: string  } 
  | { name: 'celebTwo', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'complete', alias?: string  } 
  
export interface CelebrityCreateOneInput {
  create?: CelebrityCreateInput | null
  connect?: CelebrityWhereUniqueInput | null
}
export type CelebrityCreateOneInputInputObject =
  | Extract<keyof CelebrityCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchUpdateInput {
  ip?: string | null
  celebOne?: CelebrityUpdateOneRequiredInput | null
  celebTwo?: CelebrityUpdateOneRequiredInput | null
  expected?: number | null
  complete?: boolean | null
}
export type MatchUpdateInputInputObject =
  | Extract<keyof MatchUpdateInput, string>
  | { name: 'ip', alias?: string  } 
  | { name: 'celebOne', alias?: string  } 
  | { name: 'celebTwo', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'complete', alias?: string  } 
  
export interface CelebrityUpdateOneRequiredInput {
  create?: CelebrityCreateInput | null
  update?: CelebrityUpdateDataInput | null
  upsert?: CelebrityUpsertNestedInput | null
  connect?: CelebrityWhereUniqueInput | null
}
export type CelebrityUpdateOneRequiredInputInputObject =
  | Extract<keyof CelebrityUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CelebrityUpdateDataInput {
  internalId?: string | null
  name?: string | null
  elo?: number | null
  disabled?: boolean | null
  totalMatches?: number | null
  unknownCount?: number | null
  image?: string | null
  imageSource?: string | null
}
export type CelebrityUpdateDataInputInputObject =
  | Extract<keyof CelebrityUpdateDataInput, string>
  | { name: 'internalId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'elo', alias?: string  } 
  | { name: 'disabled', alias?: string  } 
  | { name: 'totalMatches', alias?: string  } 
  | { name: 'unknownCount', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'imageSource', alias?: string  } 
  
export interface CelebrityUpsertNestedInput {
  update?: CelebrityUpdateDataInput
  create?: CelebrityCreateInput
}
export type CelebrityUpsertNestedInputInputObject =
  | Extract<keyof CelebrityUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MatchUpdateManyMutationInput {
  ip?: string | null
  expected?: number | null
  complete?: boolean | null
}
export type MatchUpdateManyMutationInputInputObject =
  | Extract<keyof MatchUpdateManyMutationInput, string>
  | { name: 'ip', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'complete', alias?: string  } 
  
export interface CelebritySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CelebrityWhereInput | null
  AND?: CelebritySubscriptionWhereInput[]
  OR?: CelebritySubscriptionWhereInput[]
  NOT?: CelebritySubscriptionWhereInput[]
}
export type CelebritySubscriptionWhereInputInputObject =
  | Extract<keyof CelebritySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IPSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: IPWhereInput | null
  AND?: IPSubscriptionWhereInput[]
  OR?: IPSubscriptionWhereInput[]
  NOT?: IPSubscriptionWhereInput[]
}
export type IPSubscriptionWhereInputInputObject =
  | Extract<keyof IPSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MatchSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MatchWhereInput | null
  AND?: MatchSubscriptionWhereInput[]
  OR?: MatchSubscriptionWhereInput[]
  NOT?: MatchSubscriptionWhereInput[]
}
export type MatchSubscriptionWhereInputInputObject =
  | Extract<keyof MatchSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type CelebrityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'internalId_ASC'
  | 'internalId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'elo_ASC'
  | 'elo_DESC'
  | 'disabled_ASC'
  | 'disabled_DESC'
  | 'totalMatches_ASC'
  | 'totalMatches_DESC'
  | 'unknownCount_ASC'
  | 'unknownCount_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'imageSource_ASC'
  | 'imageSource_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type IPOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'ip_ASC'
  | 'ip_DESC'
  | 'votes_ASC'
  | 'votes_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MatchOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'ip_ASC'
  | 'ip_DESC'
  | 'expected_ASC'
  | 'expected_DESC'
  | 'complete_ASC'
  | 'complete_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  